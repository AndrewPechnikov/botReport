
from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import datetime

from bot.states import Equipment, Salary
from bot.keyboards import kb_main, kb_equipment, kb_months
from utils.excel_manager import ExcelManager

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
equipment_router = Router()
excel_manager = ExcelManager()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /equipment
@equipment_router.message(F.text == "–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
async def equipment_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ä–æ–±–æ—Ç–∏ –∑ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è–º
    """
    await message.answer("–ú–µ–Ω—é —Ä–æ–±–æ—Ç–∏ –∑ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è–º:", reply_markup=kb_equipment)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@equipment_router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    """
    await state.clear()
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb_main)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
@equipment_router.message(F.text == "–î–æ–¥–∞—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
async def add_equipment_start(message: Message, state: FSMContext):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    """
    await state.set_state(Equipment.name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:")

@equipment_router.message(Equipment.name)
async def add_equipment_name(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —ñ –∑–∞–ø–∏—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    """
    await state.update_data(name=message.text)
    await state.set_state(Equipment.quantity)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:")

@equipment_router.message(Equipment.quantity)
async def add_equipment_quantity(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ –∑–∞–ø–∏—Ç —ñ–Ω–∂–µ–Ω–µ—Ä–∞
    """
    try:
        quantity = int(message.text)
        await state.update_data(quantity=quantity)
        await state.set_state(Equipment.engineer)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞ (–∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å):", 
                             reply_markup=ReplyKeyboardMarkup(
                                 keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]],
                                 resize_keyboard=True))
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ.")

@equipment_router.message(Equipment.engineer, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_engineer(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫—É —ñ–Ω–∂–µ–Ω–µ—Ä–∞
    """
    data = await state.get_data()
    success, message_text = excel_manager.add_equipment(
        data.get("name"), 
        data.get("quantity"),
        None
    )
    
    await state.clear()
    await message.answer(message_text, reply_markup=kb_equipment)

@equipment_router.message(Equipment.engineer)
async def add_equipment_engineer(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞ —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    """
    data = await state.get_data()
    success, message_text = excel_manager.add_equipment(
        data.get("name"), 
        data.get("quantity"),
        message.text
    )
    
    await state.clear()
    await message.answer(message_text, reply_markup=kb_equipment)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
@equipment_router.message(F.text == "–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
async def assign_equipment_start(message: Message, state: FSMContext):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    """
    df = excel_manager.get_equipment_list()
    if df.empty:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=kb_equipment)
        return
    
    await state.set_state(Equipment.name)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –Ω–∞—è–≤–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    equipment_buttons = []
    for name in df['–ù–∞–∑–≤–∞'].unique():
        equipment_buttons.append([KeyboardButton(text=name)])
    
    equipment_keyboard = ReplyKeyboardMarkup(
        keyboard=equipment_buttons + [[KeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏")]],
        resize_keyboard=True
    )
    
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:", reply_markup=equipment_keyboard)

@equipment_router.message(Equipment.name, F.text == "–°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_assign(message: Message, state: FSMContext):
    """
    –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    """
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=kb_equipment)

@equipment_router.message(Equipment.name)
async def assign_equipment_name(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ –∑–∞–ø–∏—Ç —ñ–Ω–∂–µ–Ω–µ—Ä–∞
    """
    df = excel_manager.get_equipment_list()
    if message.text not in df['–ù–∞–∑–≤–∞'].values:
        await message.answer("–¢–∞–∫–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(name=message.text)
    await state.set_state(Equipment.engineer)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞, —è–∫–æ–º—É –ø—Ä–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:")

@equipment_router.message(Equipment.engineer)
async def assign_equipment_engineer(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞ —ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    """
    data = await state.get_data()
    success, message_text = excel_manager.assign_equipment(
        data.get("name"),
        message.text
    )
    
    await state.clear()
    await message.answer(message_text, reply_markup=kb_equipment)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
@equipment_router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
async def show_equipment_list(message: Message):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è
    """
    df = excel_manager.get_equipment_list()
    if df.empty:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=kb_equipment)
        return
    
    equipment_text = "üìã –°–ø–∏—Å–æ–∫ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:\n\n"
    for _, row in df.iterrows():
        engineer = row.get('–Ü–Ω–∂–µ–Ω–µ—Ä', '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ')
        if pd.isna(engineer):
            engineer = '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'
        
        equipment_text += f"üì¶ {row['–ù–∞–∑–≤–∞']} - {row['–ö—ñ–ª—å–∫—ñ—Å—Ç—å']} —à—Ç.\n   üë®‚Äçüîß –Ü–Ω–∂–µ–Ω–µ—Ä: {engineer}\n\n"
    
    await message.answer(equipment_text, reply_markup=kb_equipment)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞—Ä–ø–ª–∞—Ç–∏
@equipment_router.message(F.text == "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç–∏")
async def salary_calculation_start(message: Message, state: FSMContext):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞—Ä–ø–ª–∞—Ç–∏
    """
    await state.set_state(Salary.engineer)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞—Ä–ø–ª–∞—Ç–∏:")

@equipment_router.message(Salary.engineer)
async def salary_engineer(message: Message, state: FSMContext):
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞ —ñ –∑–∞–ø–∏—Ç –º—ñ—Å—è—Ü—è
    """
    await state.update_data(engineer=message.text)
    await state.set_state(Salary.month)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:", reply_markup=kb_months)

@equipment_router.message(Salary.month)
async def salary_month(message: Message, state: FSMContext):
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∏
    """
    month_mapping = {
        '–°—ñ—á–µ–Ω—å': 1, '–õ—é—Ç–∏–π': 2, '–ë–µ—Ä–µ–∑–µ–Ω—å': 3,
        '–ö–≤—ñ—Ç–µ–Ω—å': 4, '–¢—Ä–∞–≤–µ–Ω—å': 5, '–ß–µ—Ä–≤–µ–Ω—å': 6,
        '–õ–∏–ø–µ–Ω—å': 7, '–°–µ—Ä–ø–µ–Ω—å': 8, '–í–µ—Ä–µ—Å–µ–Ω—å': 9,
        '–ñ–æ–≤—Ç–µ–Ω—å': 10, '–õ–∏—Å—Ç–æ–ø–∞–¥': 11, '–ì—Ä—É–¥–µ–Ω—å': 12,
        '–ó–∞ –≤–µ—Å—å —á–∞—Å': None
    }
    
    month = month_mapping.get(message.text)
    data = await state.get_data()
    engineer = data.get("engineer")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–≤—ñ—Ç–∏ —ñ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç—É
    total_amount = excel_manager.calculate_salary(engineer, month)
    
    month_text = message.text if message.text != '–ó–∞ –≤–µ—Å—å —á–∞—Å' else '–≤–µ—Å—å —á–∞—Å'
    
    await message.answer(
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–∞ {engineer} –∑–∞ {month_text}:\n\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_amount} –≥—Ä–Ω",
        reply_markup=kb_main
    )
    
    await state.clear()
