from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import pandas as pd

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∞–π—Å —ñ–∑ —Ñ–∞–π–ª—É
file_path = "–ù–û–í–ò–ô –ø—Ä–∞–π—Å –¥–ª—è –Ü–ù–ñ–ï–ù–ï–†–Ü–í 06.2024.xlsx"
df = pd.read_excel(file_path, sheet_name="–õ–∏—Å—Ç1")

# –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ä–æ–±—ñ—Ç
job_list = [f"{row['–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏']} - {row['–∫–æ—à—Ç–æ—Ä–∏—Å –¥–ª—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞']} –≥—Ä–Ω" for _, row in df.iterrows()]
job_list_for_button = [f"{row['–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏']} - {row['–∫–æ—à—Ç–æ—Ä–∏—Å –¥–ª—è —ñ–Ω–∂–µ–Ω–µ—Ä–∞']} –≥—Ä–Ω" for _, row in df.iterrows()]
router = Router()

class Report(StatesGroup):
    stNumber = State()  # –ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü—ñ—ó
    description = State()  # –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏
    solution = State()  # –†—ñ—à–µ–Ω–Ω—è
    work_done = State()  # –í–∏–∫–æ–Ω–∞–Ω—ñ —Ä–æ–±–æ—Ç–∏
    distance = State()  # –í—ñ–¥—Å—Ç–∞–Ω—å
    photos = State()  # –§–æ—Ç–æ

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
kb_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç')],
        [KeyboardButton(text='–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç')]
    ],
    resize_keyboard=True
)

kb_skip = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]],
    resize_keyboard=True
)

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤.', reply_markup=kb_main)

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤—ñ—Ç–∏ –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—É —Ä–æ–±–æ—Ç—É.')

@router.message(F.text == '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç')
async def report(message: Message, state: FSMContext):
    await state.set_state(Report.stNumber)
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü—ñ—ó:')

@router.message(Report.stNumber)
async def report_stNumber(message: Message, state: FSMContext):
    await state.update_data(stNumber=message.text)
    await state.set_state(Report.description)
    await message.answer("–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—ó:")

@router.message(Report.description)
async def report_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Report.solution)
    await message.answer("–Ø–∫ –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É?")

@router.message(Report.solution)
async def report_solution(message: Message, state: FSMContext):
    await state.update_data(solution=message.text)
    await state.set_state(Report.work_done)

    # –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–±—ñ—Ç —É –¥–≤–∞ —Ä—è–¥–∏
    job_buttons = [[KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]]  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –ø–µ—Ä—à–æ—é
    job_buttons += [[KeyboardButton(text=job_list[i]), KeyboardButton(text=job_list[i + 1])]
                    for i in range(0, min(len(job_list), 64) - 1, 2)]  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Ä—è–¥–∏
    jobs_keyboard = ReplyKeyboardMarkup(keyboard=job_buttons)

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–Ω—ñ —Ä–æ–±–æ—Ç–∏ (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ —á–µ—Ä–∑—ñ):", reply_markup=jobs_keyboard)

@router.message(Report.work_done)
async def report_work_done(message: Message, state: FSMContext):
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        await state.set_state(Report.distance)
        await message.answer("–°–∫—ñ–ª—å–∫–∏ –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤ –≤–∏ –ø—Ä–æ—ó—Ö–∞–ª–∏ –¥–ª—è —Ü—ñ—î—ó —Ä–æ–±–æ—Ç–∏?")
        return

    data = await state.get_data()
    work_done = data.get("work_done", [])
    work_done.append(message.text)

    await state.update_data(work_done=work_done)
    await message.answer("–Ø–∫—â–æ –±—ñ–ª—å—à–µ —Ä–æ–±—ñ—Ç –Ω–µ–º–∞—î ‚Äì –Ω–∞–ø–∏—à—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'. –Ø–∫—â–æ —î —â–µ, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É.")

@router.message(F.text == '–ì–æ—Ç–æ–≤–æ')
async def report_done(message: Message, state: FSMContext):
    await state.set_state(Report.distance)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤ –≤–∏ –ø—Ä–æ—ó—Ö–∞–ª–∏ –¥–ª—è —Ü—ñ—î—ó —Ä–æ–±–æ—Ç–∏?")

@router.message(Report.distance)
async def report_distance(message: Message, state: FSMContext):
    await state.update_data(distance=message.text)
    await state.set_state(Report.photos)
    await message.answer("–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=kb_skip)

@router.message(Report.photos, F.photo)
async def report_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
    photos.append(message.photo[-1].file_id)  # –ë–µ—Ä–µ–º–æ –Ω–∞–π–∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ

    await state.update_data(photos=photos)
    await message.answer("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.", reply_markup=kb_skip)

@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def report_skip_photos(message: Message, state: FSMContext):
    data = await state.get_data()

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç —ñ –¥–æ–¥–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∏—ó–∑–¥—É
    work_done = data.get("work_done", [])
    distance = int(data.get("distance", 0))  # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂
    travel_cost = distance * 8  # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∏—ó–∑–¥—É
    work_done.append(f"üöó –í–∏—ó–∑–¥ –Ω–∞ {distance} –∫–º - {travel_cost} –≥—Ä–Ω")  # –î–æ–¥–∞—î–º–æ —É —Å–ø–∏—Å–æ–∫ —Ä–æ–±—ñ—Ç

    # –§–æ—Ä–º—É—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±–µ–∑ —Ä–æ–±—ñ—Ç, –∞–ª–µ –∑ —Ñ–æ—Ç–æ)
    report_text_1 = (
        f"üìç **–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü—ñ—ó:** {data.get('stNumber', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù **–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:** {data.get('description', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚úÖ **–†—ñ—à–µ–Ω–Ω—è:** {data.get('solution', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    )

    # –§–æ—Ä–º—É—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑—ñ —Å–ø–∏—Å–∫–æ–º —Ä–æ–±—ñ—Ç, –∞–ª–µ –±–µ–∑ —Ñ–æ—Ç–æ)
    work_done_text = "\n".join([f"   - **{job}**" for job in work_done])  # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç
    report_text_2 = (
        f"üìç **–ù–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü—ñ—ó:** {data.get('stNumber', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù **–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏:** {data.get('description', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚úÖ **–†—ñ—à–µ–Ω–Ω—è:** {data.get('solution', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîß **–í–∏–∫–æ–Ω–∞–Ω—ñ —Ä–æ–±–æ—Ç–∏:**\n$\n{work_done_text}\n$\n"
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ–æ—Ç–æ
    if "photos" in data and data["photos"]:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        media = [InputMediaPhoto(media=photo) for photo in data["photos"]]

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Ñ–æ—Ç–æ —Ä–∞–∑–æ–º –∑ –ø–µ—Ä—à–∏–º –∑–≤—ñ—Ç–æ–º
        await message.answer_media_group(media=media)  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø—ñ
        await message.answer(report_text_1, parse_mode="Markdown")  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –∑–≤—ñ—Ç—É
    else:
        await message.answer(report_text_1, parse_mode="Markdown")  # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î, –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–±–æ—Ç–∞–º–∏
    await message.answer(report_text_2, parse_mode="Markdown")

    await message.answer("–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –≤ –±–æ—Ç –∞–±–æ –≤ service point.", reply_markup=kb_main)
    await state.clear()
